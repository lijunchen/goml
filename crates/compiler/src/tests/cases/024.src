struct Point {
    x: int,
    y: int,
}

struct Wrapper[T] {
    value: T,
}

fn make_point() -> Point {
    Point { x: 0, y: 0 }
}

fn flip(point: Point) -> Point {
    let Point(x, y) = point in
    Point { y: x, x: y }
}

fn wrap_int(x: int) -> Wrapper[int] {
    Wrapper { value: x }
}

fn main() {
    let start = make_point() in
    let swapped = flip(Point { y: 2, x: 1 }) in
    let boxed = wrap_int(3) in
    let point_box = Wrapper { value: swapped } in
    let _ = start in
    let _ = boxed in
    let _ = point_box in
    ()
}
