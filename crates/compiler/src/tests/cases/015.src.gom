package main

import (
    "fmt"
)

func unit_to_string(x struct{}) string {
    return "()"
}

func bool_to_string(x bool) string {
    if x {
        return "true"
    } else {
        return "false"
    }
}

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func int_sub(x int, y int) int {
    return x - y
}

func int_less(x int, y int) bool {
    return x < y
}

func string_print(s string) struct{} {
    fmt.Print(s)
    return struct{}{}
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

func missing(s string) struct{} {
    panic("missing: " + s)
    return struct{}{}
}

type IntList interface {
    isIntList()
}

type Nil struct {}

func (_ Nil) isIntList() {}

type Cons struct {
    _0 int
    _1 IntList
}

func (_ Cons) isIntList() {}

func print_int_list(xs__0 IntList) struct{} {
    var ret35 struct{}
    switch xs__0.(type) {
    case Nil:
        ret35 = string_print("Nil")
    case Cons:
        var x0 int = xs__0.(Cons)._0
        var x1 IntList = xs__0.(Cons)._1
        var xs__2 IntList = x1
        var x__1 int = x0
        var mtmp2 struct{} = string_print("Cons")
        var mtmp3 struct{} = string_print("(")
        var t25 string = int_to_string(x__1)
        var mtmp4 struct{} = string_print(t25)
        var mtmp5 struct{} = string_print(", ")
        var mtmp6 struct{} = print_int_list(xs__2)
        var mtmp7 struct{} = string_print(")")
        ret35 = struct{}{}
    }
    return ret35
}

func int_list_rev_aux(xs__3 IntList, acc__4 IntList) IntList {
    var ret36 IntList
    switch xs__3.(type) {
    case Nil:
        ret36 = acc__4
    case Cons:
        var x8 int = xs__3.(Cons)._0
        var x9 IntList = xs__3.(Cons)._1
        var tail__6 IntList = x9
        var head__5 int = x8
        var t26 IntList = Cons{
            _0: head__5,
            _1: acc__4,
        }
        ret36 = int_list_rev_aux(tail__6, t26)
    }
    return ret36
}

func int_list_rev(xs__7 IntList) IntList {
    var ret37 IntList
    var t27 IntList = Nil{}
    ret37 = int_list_rev_aux(xs__7, t27)
    return ret37
}

func int_list_length(xs__8 IntList) int {
    var ret38 int
    switch xs__8.(type) {
    case Nil:
        ret38 = 0
    case Cons:
        var x10 int = xs__8.(Cons)._0
        var x11 IntList = xs__8.(Cons)._1
        var xs__9 IntList = x11
        var t28 int = int_list_length(xs__9)
        ret38 = int_add(1, t28)
    }
    return ret38
}

func print_int_list_length(xs__10 IntList) struct{} {
    var ret39 struct{}
    var mtmp12 struct{} = string_print("Length: ")
    var t30 int = int_list_length(xs__10)
    var t29 string = int_to_string(t30)
    var mtmp13 struct{} = string_println(t29)
    ret39 = struct{}{}
    return ret39
}

func main0() struct{} {
    var ret40 struct{}
    var x__11 IntList = Nil{}
    var mtmp14 struct{} = print_int_list(x__11)
    var mtmp15 struct{} = string_println("")
    var mtmp16 struct{} = print_int_list_length(x__11)
    var t31 IntList = Nil{}
    var x__12 IntList = Cons{
        _0: 1,
        _1: t31,
    }
    var mtmp17 struct{} = print_int_list(x__12)
    var mtmp18 struct{} = string_println("")
    var mtmp19 struct{} = print_int_list_length(x__12)
    var t34 IntList = Nil{}
    var t33 IntList = Cons{
        _0: 3,
        _1: t34,
    }
    var t32 IntList = Cons{
        _0: 2,
        _1: t33,
    }
    var x__13 IntList = Cons{
        _0: 1,
        _1: t32,
    }
    var mtmp20 struct{} = print_int_list(x__13)
    var mtmp21 struct{} = string_println("")
    var mtmp22 struct{} = print_int_list_length(x__13)
    var y__14 IntList = int_list_rev(x__13)
    var mtmp23 struct{} = print_int_list(y__14)
    var mtmp24 struct{} = string_println("")
    ret40 = struct{}{}
    return ret40
}

func main() {
    main0()
}
