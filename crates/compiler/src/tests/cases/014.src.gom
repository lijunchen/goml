package main

import (
    "fmt"
)

func unit_to_string(x struct{}) string {
    return "()"
}

func bool_to_string(x bool) string {
    if x {
        return "true"
    } else {
        return "false"
    }
}

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func int_sub(x int, y int) int {
    return x - y
}

func int_less(x int, y int) bool {
    return x < y
}

func string_print(s string) struct{} {
    fmt.Print(s)
    return struct{}{}
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

func missing(s string) struct{} {
    panic("missing: " + s)
    return struct{}{}
}

type Tuple2_bool_bool struct {
    _0 bool
    _1 bool
}

func test_nested_match(x__0 Tuple2_bool_bool, y__1 Tuple2_bool_bool) struct{} {
    var ret20 struct{}
    var x0 bool = x__0._0
    var x1 bool = x__0._1
    switch x1 {
    case true:
        var x2 bool = y__1._0
        var x3 bool = y__1._1
        switch x3 {
        case true:
            switch x2 {
            case true:
                ret20 = string_println("case4")
            case false:
                ret20 = string_println("case3")
            }
        case false:
            ret20 = string_println("case4")
        }
    case false:
        switch x0 {
        case true:
            var x4 bool = y__1._0
            var x5 bool = y__1._1
            switch x5 {
            case true:
                switch x4 {
                case true:
                    ret20 = string_println("case2")
                case false:
                    ret20 = string_println("case1")
                }
            case false:
                ret20 = string_println("case2")
            }
        case false:
            var x6 bool = y__1._0
            var x7 bool = y__1._1
            switch x7 {
            case true:
                switch x6 {
                case true:
                    ret20 = string_println("case4")
                case false:
                    ret20 = string_println("case3")
                }
            case false:
                ret20 = string_println("case4")
            }
        }
    }
    return ret20
}

func main0() struct{} {
    var ret21 struct{}
    var t12 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: true,
        _1: false,
    }
    var t13 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: false,
        _1: true,
    }
    var mtmp8 struct{} = test_nested_match(t12, t13)
    var t14 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: true,
        _1: false,
    }
    var t15 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: true,
        _1: false,
    }
    var mtmp9 struct{} = test_nested_match(t14, t15)
    var t16 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: false,
        _1: true,
    }
    var t17 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: false,
        _1: true,
    }
    var mtmp10 struct{} = test_nested_match(t16, t17)
    var t18 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: false,
        _1: true,
    }
    var t19 Tuple2_bool_bool = Tuple2_bool_bool{
        _0: true,
        _1: false,
    }
    var mtmp11 struct{} = test_nested_match(t18, t19)
    ret21 = struct{}{}
    return ret21
}

func main() {
    main0()
}
