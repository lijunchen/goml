fn bounce_int(shape/0: Shape[Int]) -> Shape[Int] {
  match shape/0 {
    Shape::Dot(x0) => {
      let x0 = Shape_0_0(shape/0) in
      let point/1 = x0 in
      Shape::Dot(point/1)
    },
    Shape::Wrapped(x1) => {
      let x1 = Shape_1_0(shape/0) in
      let inner/2 = x1 in
      Shape::Wrapped(inner/2)
    },
    Shape::Origin => {
      Shape::Origin
    },
  }
}

fn wrap_unit(value/3: Wrapper[Unit]) -> Shape[Unit] {
  Shape::Wrapped(value/3)
}

fn pick(flag/4: Bool, point/5: Point, wrapper/6: Wrapper[Int]) -> Shape[Int] {
  match flag/4 {
    true => {
      Shape::Dot(point/5)
    },
    false => {
      Shape::Wrapped(wrapper/6)
    },
  }
}

fn describe(shape/7: Shape[T]) -> Int {
  match shape/7 {
    Shape::Dot(x2) => {
      let x2 = Shape_0_0(shape/7) in
      1
    },
    Shape::Wrapped(x3) => {
      let x3 = Shape_1_0(shape/7) in
      2
    },
    Shape::Origin => {
      0
    },
  }
}

fn point_to_string() -> String {
  "Point { x: Int, y: Int }"
}

fn wrapper_int_to_string() -> String {
  "Wrapper[Int]"
}

fn wrapper_unit_to_string() -> String {
  "Wrapper[Unit]"
}

fn shape_int_to_string(shape/8: Shape[Int]) -> String {
  match shape/8 {
    Shape::Dot(x4) => {
      let x4 = Shape_0_0(shape/8) in
      "Shape::Dot"
    },
    Shape::Wrapped(x5) => {
      let x5 = Shape_1_0(shape/8) in
      "Shape::Wrapped"
    },
    Shape::Origin => {
      "Shape::Origin"
    },
  }
}

fn shape_unit_to_string(shape/9: Shape[Unit]) -> String {
  match shape/9 {
    Shape::Dot(x6) => {
      let x6 = Shape_0_0(shape/9) in
      "Shape::Dot"
    },
    Shape::Wrapped(x7) => {
      let x7 = Shape_1_0(shape/9) in
      "Shape::Wrapped"
    },
    Shape::Origin => {
      "Shape::Origin"
    },
  }
}

fn main() -> Unit {
  let mtmp8 = string_println(point_to_string()) in
  let mtmp9 = string_println(wrapper_int_to_string()) in
  let mtmp10 = string_println(wrapper_unit_to_string()) in
  let bounced_origin/10 = bounce_int(Shape::Origin) in
  let mtmp11 = string_println(shape_int_to_string(bounced_origin/10)) in
  let mtmp12 = string_println(shape_int_to_string(Shape::Origin)) in
  let mtmp13 = string_println(shape_unit_to_string(Shape::Origin)) in
  let mtmp14 = describe(bounce_int(Shape::Origin)) in
  string_println("struct enums!")
}