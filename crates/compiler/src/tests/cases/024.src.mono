fn point_to_string(p/0: Point) -> string {
  let mtmp0 = p/0 in
  let x1 = Point.x(mtmp0) in
  let x2 = Point.y(mtmp0) in
  let y/2 = x2 in
  let x/1 = x1 in
  string_add("Point { x: ", string_add(int_to_string(x/1), string_add(", y: ", string_add(int_to_string(y/2), " }"))))
}

fn color_to_string(c/3: Color) -> string {
  match c/3 {
    Color::Red => {
      "Red"
    },
    Color::Green => {
      "Green"
    },
    Color::Blue => {
      "Blue"
    },
  }
}

fn line_to_string(l/4: Line) -> string {
  let mtmp3 = l/4 in
  let x4 = Line.from(mtmp3) in
  let x5 = Line.to(mtmp3) in
  let x6 = Line.color(mtmp3) in
  let color/7 = x6 in
  let to/6 = x5 in
  let from/5 = x4 in
  string_add("Line { from: ", string_add(point_to_string(from/5), string_add(", to: ", string_add(point_to_string(to/6), string_add(", color: ", string_add(color_to_string(color/7), " }"))))))
}

fn main() -> unit {
  let p0/8 = Point { x: 0, y: 0 } in
  let p1/9 = Point { x: 10, y: 10 } in
  let line/10 = Line { from: p0/8, to: p1/9, color: Color::Red } in
  string_println(line_to_string(line/10))
}