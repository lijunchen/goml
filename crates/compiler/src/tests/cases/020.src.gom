package main

import (
    "fmt"
)

func unit_to_string(x struct{}) string {
    return "()"
}

func bool_to_string(x bool) string {
    if x {
        return "true"
    } else {
        return "false"
    }
}

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func int_sub(x int, y int) int {
    return x - y
}

func int_mul(x int, y int) int {
    return x * y
}

func int_div(x int, y int) int {
    return x / y
}

func int_less(x int, y int) bool {
    return x < y
}

func string_add(a string, b string) string {
    return a + b
}

func string_print(s string) struct{} {
    fmt.Print(s)
    return struct{}{}
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

func missing(s string) struct{} {
    println("missing: " + s)
    panic("")
    return struct{}{}
}

type Point struct {
    x int
    y int
}

type Wrapper__int struct {
    value int
}

type Wrapper__unit struct {
    value struct{}
}

type Shape__int interface {
    isShape__int()
}

type Shape__int_Dot struct {
    _0 Point
}

func (_ Shape__int_Dot) isShape__int() {}

type Shape__int_Wrapped struct {
    _0 Wrapper__int
}

func (_ Shape__int_Wrapped) isShape__int() {}

type Shape__int_Origin struct {}

func (_ Shape__int_Origin) isShape__int() {}

type Shape__unit interface {
    isShape__unit()
}

type Shape__unit_Dot struct {
    _0 Point
}

func (_ Shape__unit_Dot) isShape__unit() {}

type Shape__unit_Wrapped struct {
    _0 Wrapper__unit
}

func (_ Shape__unit_Wrapped) isShape__unit() {}

type Shape__unit_Origin struct {}

func (_ Shape__unit_Origin) isShape__unit() {}

func bounce_int(shape__0 Shape__int) Shape__int {
    var ret57 Shape__int
    switch shape__0 := shape__0.(type) {
    case Shape__int_Dot:
        var x0 Point = shape__0._0
        var point__1 Point = x0
        ret57 = Shape__int_Dot{
            _0: point__1,
        }
    case Shape__int_Wrapped:
        var x1 Wrapper__int = shape__0._0
        var inner__2 Wrapper__int = x1
        ret57 = Shape__int_Wrapped{
            _0: inner__2,
        }
    case Shape__int_Origin:
        ret57 = Shape__int_Origin{}
    }
    return ret57
}

func wrap_unit(value__3 Wrapper__unit) Shape__unit {
    var ret58 Shape__unit
    ret58 = Shape__unit_Wrapped{
        _0: value__3,
    }
    return ret58
}

func pick(flag__4 bool, point__5 Point, wrapper__6 Wrapper__int) Shape__int {
    var ret59 Shape__int
    switch flag__4 {
    case true:
        ret59 = Shape__int_Dot{
            _0: point__5,
        }
    case false:
        ret59 = Shape__int_Wrapped{
            _0: wrapper__6,
        }
    }
    return ret59
}

func point_to_string(point__8 Point) string {
    var ret60 string
    var mtmp4 Point = point__8
    var x5 int = mtmp4.x
    var x6 int = mtmp4.y
    var y__10 int = x6
    var x__9 int = x5
    var t25 string = int_to_string(x__9)
    var with_x__11 string = string_add("Point { x: ", t25)
    var with_y_label__12 string = string_add(with_x__11, ", y: ")
    var t26 string = int_to_string(y__10)
    var with_y__13 string = string_add(with_y_label__12, t26)
    ret60 = string_add(with_y__13, " }")
    return ret60
}

func wrapper_int_to_string(wrapper__14 Wrapper__int) string {
    var ret61 string
    var mtmp7 Wrapper__int = wrapper__14
    var x8 int = mtmp7.value
    var value__15 int = x8
    var t27 string = int_to_string(value__15)
    var prefix__16 string = string_add("Wrapper[int] { value: ", t27)
    ret61 = string_add(prefix__16, " }")
    return ret61
}

func wrapper_unit_to_string(wrapper__17 Wrapper__unit) string {
    var ret62 string
    var mtmp9 Wrapper__unit = wrapper__17
    var x10 struct{} = mtmp9.value
    var value__18 struct{} = x10
    var t28 string = unit_to_string(value__18)
    var prefix__19 string = string_add("Wrapper[unit] { value: ", t28)
    ret62 = string_add(prefix__19, " }")
    return ret62
}

func shape_int_to_string(shape__20 Shape__int) string {
    var ret63 string
    switch shape__20 := shape__20.(type) {
    case Shape__int_Dot:
        var x11 Point = shape__20._0
        var point__21 Point = x11
        var t29 string = point_to_string(point__21)
        var prefix__22 string = string_add("Shape::Dot(", t29)
        ret63 = string_add(prefix__22, ")")
    case Shape__int_Wrapped:
        var x12 Wrapper__int = shape__20._0
        var wrapper__23 Wrapper__int = x12
        var t30 string = wrapper_int_to_string(wrapper__23)
        var prefix__24 string = string_add("Shape::Wrapped(", t30)
        ret63 = string_add(prefix__24, ")")
    case Shape__int_Origin:
        ret63 = "Shape::Origin"
    }
    return ret63
}

func shape_unit_to_string(shape__25 Shape__unit) string {
    var ret64 string
    switch shape__25 := shape__25.(type) {
    case Shape__unit_Dot:
        var x13 Point = shape__25._0
        var point__26 Point = x13
        var t31 string = point_to_string(point__26)
        var prefix__27 string = string_add("Shape::Dot(", t31)
        ret64 = string_add(prefix__27, ")")
    case Shape__unit_Wrapped:
        var x14 Wrapper__unit = shape__25._0
        var wrapper__28 Wrapper__unit = x14
        var t32 string = wrapper_unit_to_string(wrapper__28)
        var prefix__29 string = string_add("Shape::Wrapped(", t32)
        ret64 = string_add(prefix__29, ")")
    case Shape__unit_Origin:
        ret64 = "Shape::Origin"
    }
    return ret64
}

func main0() struct{} {
    var ret65 struct{}
    var t34 Point = Point{
        x: 3,
        y: 4,
    }
    var t33 string = point_to_string(t34)
    string_println(t33)
    var t36 Wrapper__int = Wrapper__int{
        value: 7,
    }
    var t35 string = wrapper_int_to_string(t36)
    string_println(t35)
    var t38 Wrapper__unit = Wrapper__unit{
        value: struct{}{},
    }
    var t37 string = wrapper_unit_to_string(t38)
    string_println(t37)
    var t39 Shape__int = Shape__int_Origin{}
    var bounced_origin__30 Shape__int = bounce_int(t39)
    var t42 Point = Point{
        x: 3,
        y: 4,
    }
    var t41 Shape__int = Shape__int_Dot{
        _0: t42,
    }
    var t40 string = shape_int_to_string(t41)
    string_println(t40)
    var t45 Wrapper__int = Wrapper__int{
        value: 7,
    }
    var t44 Shape__int = Shape__int_Wrapped{
        _0: t45,
    }
    var t43 string = shape_int_to_string(t44)
    string_println(t43)
    var t46 string = shape_int_to_string(bounced_origin__30)
    string_println(t46)
    var t49 Point = Point{
        x: 3,
        y: 4,
    }
    var t48 Shape__unit = Shape__unit_Dot{
        _0: t49,
    }
    var t47 string = shape_unit_to_string(t48)
    string_println(t47)
    var t52 Wrapper__unit = Wrapper__unit{
        value: struct{}{},
    }
    var t51 Shape__unit = Shape__unit_Wrapped{
        _0: t52,
    }
    var t50 string = shape_unit_to_string(t51)
    string_println(t50)
    var t54 Shape__unit = Shape__unit_Origin{}
    var t53 string = shape_unit_to_string(t54)
    string_println(t53)
    var t56 Shape__int = Shape__int_Origin{}
    var t55 Shape__int = bounce_int(t56)
    describe__T_int(t55)
    ret65 = string_println("struct enums!")
    return ret65
}

func describe__T_int(shape__7 Shape__int) int {
    var ret66 int
    switch shape__7.(type) {
    case Shape__int_Dot:
        ret66 = 1
    case Shape__int_Wrapped:
        ret66 = 2
    case Shape__int_Origin:
        ret66 = 0
    }
    return ret66
}

func main() {
    main0()
}
