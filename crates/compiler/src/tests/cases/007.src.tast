main () :Unit let a/0 = Expr::Mul(Expr::Add(Expr::Zero,Expr::Zero),Expr::Zero);
match (a/0 : Expr) {
    Expr::Add(Expr::Zero,Expr::Zero) => print( int_to_string( 0 ) ),
    Expr::Mul(Expr::Zero,x/1) => print( int_to_string( 1 ) ),
    Expr::Add(Expr::Succ(x/2),y/3) => print( int_to_string( 2 ) ),
    Expr::Mul(x/4,Expr::Zero) => print( int_to_string( 3 ) ),
    Expr::Mul(Expr::Add(x/5,y/6),z/7) => print( int_to_string( 4 ) ),
    Expr::Add(x/8,Expr::Zero) => print( int_to_string( 5 ) ),
    x/9 => print( int_to_string( 6 ) ),
}