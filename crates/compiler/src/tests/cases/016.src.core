fn list_length(xs/0: List[T]) -> Int {
  match xs/0 {
    List::Nil => {
      0
    },
    List::Cons(x0, x1) => {
      let x0 = List_1_0(xs/0) in
      let x1 = List_1_1(xs/0) in
      let tail/1 = x1 in
      int_add(1, list_length(tail/1))
    },
  }
}

fn int_list_length(xs/2: List[Int]) -> Int {
  match xs/2 {
    List::Nil => {
      0
    },
    List::Cons(x2, x3) => {
      let x2 = List_1_0(xs/2) in
      let x3 = List_1_1(xs/2) in
      let tail/3 = x3 in
      int_add(1, int_list_length(tail/3))
    },
  }
}

fn main() -> Unit {
  let x/4 = List::Cons(1, List::Nil) in
  let length/5 = list_length(x/4) in
  let mtmp4 = string_println(int_to_string(length/5)) in
  let x/6 = List::Cons(1, List::Cons(2, List::Nil)) in
  let length/7 = list_length(x/6) in
  let mtmp5 = string_println(int_to_string(length/7)) in
  let x/8 = List::Cons(0, List::Cons(1, List::Cons(2, List::Nil))) in
  let length/9 = int_list_length(x/8) in
  let mtmp6 = string_println(int_to_string(length/9)) in
  let x/10 = List::Cons((), List::Nil) in
  let length/11 = list_length(x/10) in
  let mtmp7 = string_println(int_to_string(length/11)) in
  let x/12 = List::Cons((), List::Cons((), List::Nil)) in
  let length/13 = list_length(x/12) in
  let mtmp8 = string_println(int_to_string(length/13)) in
  let x/14 = List::Cons(true, List::Cons(false, List::Nil)) in
  let length/15 = list_length(x/14) in
  let mtmp9 = string_println(int_to_string(length/15)) in
  ()
}