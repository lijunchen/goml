enum IntList {
    Nil,
    Cons(int, IntList)
}

fn print_int_list(xs: IntList) {
    match xs {
        Nil => string_print("Nil"),
        Cons(x, xs) => let _ = string_print("Cons") in
          let _ = string_print("(") in
          let _ = string_print(int_to_string(x)) in
          let _ = string_print(", ") in
          let _ = print_int_list(xs) in
          let _ = string_print(")") in
          (),
    }
}

fn int_list_rev_aux(xs: IntList, acc: IntList) -> IntList {
    match xs {
        Nil => acc,
        Cons(head, tail) => int_list_rev_aux(tail, Cons(head, acc)),
    }
}

fn int_list_rev(xs: IntList) -> IntList {
    int_list_rev_aux(xs, Nil)
}

fn int_list_length(xs: IntList) -> int {
    match xs {
        Nil => 0,
        Cons(_, xs) => 1 + int_list_length(xs),
    }
}

fn print_int_list_length(xs: IntList) {
    let _ = string_print("Length: ") in
    let _ = string_println(int_to_string(int_list_length(xs))) in
    ()
}

fn main() {
    let x = Nil in
    let _ = print_int_list(x) in
    let _ = string_println("") in
    let _ = print_int_list_length(x) in
    let x = Cons(1, Nil) in
    let _ = print_int_list(x) in
    let _ = string_println("") in
    let _ = print_int_list_length(x) in
    let x = Cons(1, Cons(2, Cons(3, Nil))) in
    let _ = print_int_list(x) in
    let _ = string_println("") in
    let _ = print_int_list_length(x) in
    let y = int_list_rev(x) in
    let _ = print_int_list(y) in
    let _ = string_println("") in
    ()
}

