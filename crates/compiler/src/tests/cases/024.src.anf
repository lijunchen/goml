fn point_to_string(p/0: Point) -> string {
  let mtmp0 = p/0 in
  let x1 = Point.x(mtmp0) in
  let x2 = Point.y(mtmp0) in
  let y/2 = x2 in
  let x/1 = x1 in
  let t12 = int_to_string(x/1) in
  let t15 = int_to_string(y/2) in
  let t14 = string_add(t15, " }") in
  let t13 = string_add(", y: ", t14) in
  let t11 = string_add(t12, t13) in
  string_add("Point { x: ", t11)
}

fn color_to_string(c/3: Color) -> string {
  match c/3 {
    Tag_0 => {
      "Red"
    },
    Tag_1 => {
      "Green"
    },
    Tag_2 => {
      "Blue"
    },
  }
}

fn line_to_string(l/4: Line) -> string {
  let mtmp3 = l/4 in
  let x4 = Line.from(mtmp3) in
  let x5 = Line.to(mtmp3) in
  let x6 = Line.color(mtmp3) in
  let color/7 = x6 in
  let to/6 = x5 in
  let from/5 = x4 in
  let t17 = point_to_string(from/5) in
  let t20 = point_to_string(to/6) in
  let t23 = color_to_string(color/7) in
  let t22 = string_add(t23, " }") in
  let t21 = string_add(", color: ", t22) in
  let t19 = string_add(t20, t21) in
  let t18 = string_add(", to: ", t19) in
  let t16 = string_add(t17, t18) in
  string_add("Line { from: ", t16)
}

fn point_type(p/8: Point) -> string {
  "unknown"
}

fn main() -> unit {
  let p0/9 = Point { x: 0, y: 0 } in
  let mtmp7 = p0/9 in
  let x8 = Point.x(mtmp7) in
  let x9 = Point.y(mtmp7) in
  let v/11 = x9 in
  let u/10 = x8 in
  let t24 = point_type(p0/9) in
  let mtmp10 = string_println(t24) in
  let p1/12 = Point { x: 10, y: 10 } in
  let t25 = Tag_0 in
  let line/13 = Line { from: p0/9, to: p1/12, color: t25 } in
  let t26 = line_to_string(line/13) in
  string_println(t26)
}