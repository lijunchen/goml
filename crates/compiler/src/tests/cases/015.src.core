fn print_int_list(xs/0: IntList) -> Unit {
  match xs/0 {
    IntList::Nil => {
      print("Nil")
    },
    IntList::Cons(x0, x1) => {
      let x0 = IntList_1_0(xs/0) in
      let x1 = IntList_1_1(xs/0) in
      let xs/2 = x1 in
      let x/1 = x0 in
      let mtmp2 = print("Cons") in
      let mtmp3 = print("(") in
      let mtmp4 = print(int_to_string(x/1)) in
      let mtmp5 = print(", ") in
      let mtmp6 = print_int_list(xs/2) in
      let mtmp7 = print(")") in
      ()
    },
  }
}

fn int_list_length(xs/3: IntList) -> Int {
  match xs/3 {
    IntList::Nil => {
      0
    },
    IntList::Cons(x8, x9) => {
      let x8 = IntList_1_0(xs/3) in
      let x9 = IntList_1_1(xs/3) in
      let xs/4 = x9 in
      int_add(1, int_list_length(xs/4))
    },
  }
}

fn print_int_list_length(xs/5: IntList) -> Unit {
  let mtmp10 = print("Length: ") in
  let mtmp11 = println(int_to_string(int_list_length(xs/5))) in
  ()
}

fn main() -> Unit {
  let x/6 = IntList::Nil in
  let mtmp12 = print_int_list(x/6) in
  let mtmp13 = println("") in
  let mtmp14 = print_int_list_length(x/6) in
  let x/7 = IntList::Cons(1, IntList::Nil) in
  let mtmp15 = print_int_list(x/7) in
  let mtmp16 = println("") in
  let mtmp17 = print_int_list_length(x/7) in
  let x/8 = IntList::Cons(1, IntList::Cons(2, IntList::Cons(3, IntList::Nil))) in
  let mtmp18 = print_int_list(x/8) in
  let mtmp19 = println("") in
  let mtmp20 = print_int_list_length(x/8) in
  ()
}