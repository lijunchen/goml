fn list_length(xs/0: List[T]) -> int {
  match (xs/0 : List[T]) {
      List::Nil => 0,
      List::Cons(_ : T, tail/1: List[T]) => 1 + list_length((tail/1 : List[T])),
  }
}

fn int_list_length(xs/2: List[int]) -> int {
  match (xs/2 : List[int]) {
      List::Nil => 0,
      List::Cons(_ : int, tail/3: List[int]) => 1 + int_list_length((tail/3 : List[int])),
  }
}

fn main() -> unit {
  let x/4: List[int] = List::Cons(1, List::Nil) in
  let length/5: int = list_length((x/4 : List[int])) in
  let _ : unit = string_println(int_to_string((length/5 : int))) in
  let x/6: List[int] = List::Cons(1, List::Cons(2, List::Nil)) in
  let length/7: int = list_length((x/6 : List[int])) in
  let _ : unit = string_println(int_to_string((length/7 : int))) in
  let x/8: List[int] = List::Cons(0, List::Cons(1, List::Cons(2, List::Nil))) in
  let length/9: int = int_list_length((x/8 : List[int])) in
  let _ : unit = string_println(int_to_string((length/9 : int))) in
  let x/10: List[unit] = List::Cons((), List::Nil) in
  let length/11: int = list_length((x/10 : List[unit])) in
  let _ : unit = string_println(int_to_string((length/11 : int))) in
  let x/12: List[unit] = List::Cons((), List::Cons((), List::Nil)) in
  let length/13: int = list_length((x/12 : List[unit])) in
  let _ : unit = string_println(int_to_string((length/13 : int))) in
  let x/14: List[bool] = List::Cons(true, List::Cons(false, List::Nil)) in
  let length/15: int = list_length((x/14 : List[bool])) in
  let _ : unit = string_println(int_to_string((length/15 : int))) in
  ()
}