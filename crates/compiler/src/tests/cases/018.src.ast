trait Arith {
  fn add(Self, Self) -> int;
  fn less(Self, Self) -> bool;
}

impl Arith for int {
  fn add(self: int, other: int) -> int {
      self + other
  }
  fn less(self: int, other: int) -> bool {
      int_less(self, other)
  }
}

trait ToString {
  fn to_string(Self) -> string;
}

impl ToString for int {
  fn to_string(self: int) -> string {
      int_to_string(self)
  }
}

impl ToString for bool {
  fn to_string(self: bool) -> string {
      bool_to_string(self)
  }
}

trait Output {
  fn output(Self) -> unit;
}

impl Output for int {
  fn output(self: int) -> unit {
      string_println(to_string(self))
  }
}

impl Output for bool {
  fn output(self: bool) -> unit {
      string_println(to_string(self))
  }
}

fn id(x: T) -> T {
    x
}

fn main() {
    let a = id(1) in
    let b = id(2) in
    let c = add(a, b) in
    let _ = output(c) in
    let a = id(3) in
    let b = id(4) in
    let c = less(a, b) in
    let _ = output(c) in
    let _ = id("abc") in
    let _ = id(true) in
    ()
}

