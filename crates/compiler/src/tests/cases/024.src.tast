fn make_point() -> Point {
  Point(0, 0)
}

fn flip(point/0: Point) -> Point {
  let Point(x/1: int, y/2: int) = (point/0 : Point) in
  Point((y/2 : int), (x/1 : int))
}

fn wrap_int(x/3: int) -> Wrapper[int] {
  Wrapper((x/3 : int))
}

fn main() -> unit {
  let start/4: Point = make_point() in
  let swapped/5: Point = flip(Point(1, 2)) in
  let boxed/6: Wrapper[int] = wrap_int(3) in
  let point_box/7: Wrapper[Point] = Wrapper((swapped/5 : Point)) in
  let _ : Point = (start/4 : Point) in
  let _ : Wrapper[int] = (boxed/6 : Wrapper[int]) in
  let _ : Wrapper[Point] = (point_box/7 : Wrapper[Point]) in
  ()
}