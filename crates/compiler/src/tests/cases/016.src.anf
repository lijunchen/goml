fn list_length(xs/0: List[T]) -> Int {
  match xs/0 {
    Constr_0 => {
      0
    },
    Constr_1 => {
      let x0 = xs/0.constr.1.0 in
      let x1 = xs/0.constr.1.1 in
      let x0 = xs/0.constr.1.0 in
      let x1 = xs/0.constr.1.1 in
      let tail/1 = x1 in
      let t10 = list_length(tail/1) in
      int_add(1, t10)
    },
  }
}

fn int_list_length(xs/2: List[Int]) -> Int {
  match xs/2 {
    Constr_0 => {
      0
    },
    Constr_1 => {
      let x2 = xs/2.constr.1.0 in
      let x3 = xs/2.constr.1.1 in
      let x2 = xs/2.constr.1.0 in
      let x3 = xs/2.constr.1.1 in
      let tail/3 = x3 in
      let t11 = int_list_length(tail/3) in
      int_add(1, t11)
    },
  }
}

fn main() -> Unit {
  let t12 = Constr_0 in
  let x/4 = List::Cons(1, t12) in
  let length/5 = list_length(x/4) in
  let t13 = int_to_string(length/5) in
  let mtmp4 = println(t13) in
  let t15 = Constr_0 in
  let t14 = List::Cons(2, t15) in
  let x/6 = List::Cons(1, t14) in
  let length/7 = list_length(x/6) in
  let t16 = int_to_string(length/7) in
  let mtmp5 = println(t16) in
  let t19 = Constr_0 in
  let t18 = List::Cons(2, t19) in
  let t17 = List::Cons(1, t18) in
  let x/8 = List::Cons(0, t17) in
  let length/9 = int_list_length(x/8) in
  let t20 = int_to_string(length/9) in
  let mtmp6 = println(t20) in
  let t21 = Constr_0 in
  let x/10 = List::Cons((), t21) in
  let length/11 = list_length(x/10) in
  let t22 = int_to_string(length/11) in
  let mtmp7 = println(t22) in
  let t24 = Constr_0 in
  let t23 = List::Cons((), t24) in
  let x/12 = List::Cons((), t23) in
  let length/13 = list_length(x/12) in
  let t25 = int_to_string(length/13) in
  let mtmp8 = println(t25) in
  let t27 = Constr_0 in
  let t26 = List::Cons(false, t27) in
  let x/14 = List::Cons(true, t26) in
  let length/15 = list_length(x/14) in
  let t28 = int_to_string(length/15) in
  let mtmp9 = println(t28) in
  ()
}