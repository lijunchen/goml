package main

import (
    "fmt"
)

func unit_to_string(x struct{}) string {
    return "()"
}

func bool_to_string(x bool) string {
    if x {
        return "true"
    } else {
        return "false"
    }
}

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func int_sub(x int, y int) int {
    return x - y
}

func int_less(x int, y int) bool {
    return x < y
}

func string_add(a string, b string) string {
    return a + b
}

func string_print(s string) struct{} {
    fmt.Print(s)
    return struct{}{}
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

func missing(s string) struct{} {
    panic("missing: " + s)
    return struct{}{}
}

type Point struct {
    x int
    y int
}

type Line struct {
    from Point
    to Point
    color Color
}

type Color interface {
    isColor()
}

type Red struct {}

func (_ Red) isColor() {}

type Green struct {}

func (_ Green) isColor() {}

type Blue struct {}

func (_ Blue) isColor() {}

func point_to_string(p__0 Point) string {
    var ret27 string
    var mtmp0 Point = p__0
    var x1 int = mtmp0.x
    var x2 int = mtmp0.y
    var y__2 int = x2
    var x__1 int = x1
    var t12 string = int_to_string(x__1)
    var t15 string = int_to_string(y__2)
    var t14 string = string_add(t15, " }")
    var t13 string = string_add(", y: ", t14)
    var t11 string = string_add(t12, t13)
    ret27 = string_add("Point { x: ", t11)
    return ret27
}

func color_to_string(c__3 Color) string {
    var ret28 string
    switch c__3.(type) {
    case Red:
        ret28 = "Red"
    case Green:
        ret28 = "Green"
    case Blue:
        ret28 = "Blue"
    }
    return ret28
}

func line_to_string(l__4 Line) string {
    var ret29 string
    var mtmp3 Line = l__4
    var x4 Point = mtmp3.from
    var x5 Point = mtmp3.to
    var x6 Color = mtmp3.color
    var color__7 Color = x6
    var to__6 Point = x5
    var from__5 Point = x4
    var t17 string = point_to_string(from__5)
    var t20 string = point_to_string(to__6)
    var t23 string = color_to_string(color__7)
    var t22 string = string_add(t23, " }")
    var t21 string = string_add(", color: ", t22)
    var t19 string = string_add(t20, t21)
    var t18 string = string_add(", to: ", t19)
    var t16 string = string_add(t17, t18)
    ret29 = string_add("Line { from: ", t16)
    return ret29
}

func point_type(p__8 Point) string {
    var ret30 string
    var x7 int = p__8.x
    var x8 int = p__8.y
    switch x7 {
    case 0:
        switch x8 {
        case 0:
            ret30 = "origin"
        case 1:
            ret30 = "up"
        default:
            var y__9 int = x8
            var mtmp9 bool = int_less(0, y__9)
            switch mtmp9 {
            case true:
                ret30 = "above"
            case false:
                ret30 = "below"
            }
        }
    case 1:
        switch x8 {
        case 0:
            ret30 = "right"
        default:
            ret30 = "unknown"
        }
    default:
        ret30 = "unknown"
    }
    return ret30
}

func main0() struct{} {
    var ret31 struct{}
    var p0__10 Point = Point{
        x: 0,
        y: 0,
    }
    var t24 string = point_type(p0__10)
    string_println(t24)
    var p1__11 Point = Point{
        x: 10,
        y: 10,
    }
    var t25 Color = Red{}
    var line__12 Line = Line{
        from: p0__10,
        to: p1__11,
        color: t25,
    }
    var t26 string = line_to_string(line__12)
    ret31 = string_println(t26)
    return ret31
}

func main() {
    main0()
}
