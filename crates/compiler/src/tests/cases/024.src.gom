package main

import (
    "fmt"
)

func unit_to_string(x struct{}) string {
    return "()"
}

func bool_to_string(x bool) string {
    if x {
        return "true"
    } else {
        return "false"
    }
}

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func int_sub(x int, y int) int {
    return x - y
}

func int_less(x int, y int) bool {
    return x < y
}

func string_add(a string, b string) string {
    return a + b
}

func string_print(s string) struct{} {
    fmt.Print(s)
    return struct{}{}
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

func missing(s string) struct{} {
    panic("missing: " + s)
    return struct{}{}
}

type Point struct {
    x int
    y int
}

type Wrapper__int struct {
    value int
}

type Wrapper__Point struct {
    value Point
}

func make_point() Point {
    var ret7 Point
    ret7 = Point{
        x: 0,
        y: 0,
    }
    return ret7
}

func flip(point__0 Point) Point {
    var ret8 Point
    var mtmp0 Point = point__0
    var x1 int = mtmp0.x
    var x2 int = mtmp0.y
    var y__2 int = x2
    var x__1 int = x1
    ret8 = Point{
        x: y__2,
        y: x__1,
    }
    return ret8
}

func wrap_int(x__3 int) Wrapper__int {
    var ret9 Wrapper__int
    ret9 = Wrapper__int{
        value: x__3,
    }
    return ret9
}

func main0() struct{} {
    var ret10 struct{}
    make_point()
    var t6 Point = Point{
        x: 1,
        y: 2,
    }
    flip(t6)
    wrap_int(3)
    ret10 = struct{}{}
    return ret10
}

func main() {
    main0()
}
