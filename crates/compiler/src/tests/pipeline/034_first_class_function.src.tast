fn double(x/0: int) -> int {
  (x/0 : int) * 2
}

fn increment(x/1: int) -> int {
  (x/1 : int) + 1
}

fn apply_once(f/2: (int) -> int, value/3: int) -> int {
  (f/2 : (int) -> int)((value/3 : int))
}

fn compose(f/4: (int) -> int, g/5: (int) -> int, value/6: int) -> int {
  (f/4 : (int) -> int)((g/5 : (int) -> int)((value/6 : int)))
}

fn main() -> unit {
  let local/7: (int) -> int = (double : (int) -> int) in
  let first/8: int = (apply_once : ((int) -> int, int) -> int)((local/7 : (int) -> int), 4) in
  let composed/9: int = (compose : ((int) -> int, (int) -> int, int) -> int)((double : (int) -> int), (increment : (int) -> int), (first/8 : int)) in
  let closure_apply/11: (int) -> int = |value/10: int| => (apply_once : ((int) -> int, int) -> int)((increment : (int) -> int), (value/10 : int)) in
  let closure_result/12: int = (closure_apply/11 : (int) -> int)((composed/9 : int)) in
  let global_invoker/15: ((int) -> int, int) -> int = |func_to_call/13: (int) -> int, value/14: int| => (apply_once : ((int) -> int, int) -> int)((func_to_call/13 : (int) -> int), (value/14 : int)) in
  let invoked_with_global/16: int = (global_invoker/15 : ((int) -> int, int) -> int)((double : (int) -> int), 3) in
  let composer_closure/18: (int) -> int = |value/17: int| => (compose : ((int) -> int, (int) -> int, int) -> int)((double : (int) -> int), (increment : (int) -> int), (value/17 : int)) in
  let composed_by_closure/19: int = (composer_closure/18 : (int) -> int)(5) in
  let printer/20: (string) -> unit = (string_println : (string) -> unit) in
  let _ : unit = (printer/20 : (string) -> unit)((int_to_string : (int) -> string)((composed/9 : int))) in
  let _ : unit = (printer/20 : (string) -> unit)((int_to_string : (int) -> string)((closure_result/12 : int))) in
  let _ : unit = (printer/20 : (string) -> unit)((int_to_string : (int) -> string)((invoked_with_global/16 : int))) in
  let _ : unit = (printer/20 : (string) -> unit)((int_to_string : (int) -> string)((composed_by_closure/19 : int))) in
  ()
}