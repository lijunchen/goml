fn bump(cell: Ref[int]) -> int {
    let _ = cell := !cell + 1 in
    !cell
}

fn flip(flag: Ref[bool]) -> bool {
    let current = !flag in
    let _ = flag := !current in
    !flag
}

fn nested_total(cell: Ref[Ref[int]]) -> int {
    let inner = !cell in
    let before = !inner in
    let _ = inner := before + 2 in
    before + !inner
}

fn main() {
    let counter = ref 39 in
    let toggler = ref false in
    let nested = ref ref 3 in

    let bumped = bump(counter) in
    let flipped = flip(toggler) in
    let inner = !nested in
    let _ = inner := !inner + bumped in
    let nested_total_val = nested_total(nested) in

    let bool_check = !false in
    let _ = string_println(int_to_string(bumped + !counter)) in
    let _ = string_println(int_to_string(nested_total_val)) in
    let _ = string_println(bool_to_string(flipped && bool_check)) in
    ()
}
