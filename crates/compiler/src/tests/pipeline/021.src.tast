fn match_int(n/0: int) -> int {
  match (n/0 : int) {
      0 => 10,
      1 => 20,
      _ : int => 30,
  }
}

fn wildcard_first(n/1: int) -> int {
  match (n/1 : int) {
      _ : int => 40,
      0 => 50,
  }
}

fn wildcard_middle(n/2: int) -> int {
  match (n/2 : int) {
      2 => 90,
      _ : int => 100,
      3 => 110,
  }
}

fn repeated(n/3: int) -> int {
  match (n/3 : int) {
      1 => 60,
      1 => 70,
      _ : int => 80,
  }
}

fn main() -> unit {
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((match_int : (int) -> int)(0))) in
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((match_int : (int) -> int)(5))) in
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((wildcard_first : (int) -> int)(0))) in
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((wildcard_first : (int) -> int)(2))) in
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((wildcard_middle : (int) -> int)(2))) in
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((wildcard_middle : (int) -> int)(3))) in
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((repeated : (int) -> int)(1))) in
  (string_println : (string) -> unit)((int_to_string : (int) -> string)((repeated : (int) -> int)(3)))
}