package main

import (
    "fmt"
)

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func int_mul(x int, y int) int {
    return x * y
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

type ClosureEnv0 struct {
    adder_2_0 int
}

type ClosureEnv1 struct {}

func double(x__0 int) int {
    var ret17 int
    ret17 = int_mul(x__0, 2)
    return ret17
}

func increment(x__1 int) int {
    var ret18 int
    ret18 = int_add(x__1, 1)
    return ret18
}

func make(adder__2 int) func(int) int {
    var ret19 func(int) int
    ret19 = ClosureEnv0{
        adder_2_0: adder__2,
    }
    return ret19
}

func chooser(flag__4 bool) func(int) int {
    var ret20 func(int) int
    if flag__4 {
        ret20 = double
    } else {
        ret20 = increment
    }
    return ret20
}

func main0() struct{} {
    var ret21 struct{}
    var t9 func(int) int = chooser(true)
    var result_direct__5 int = t9(3)
    var chosen__6 func(int) int = chooser(false)
    var result_from_var__7 int = chosen__6(4)
    var apply__10 ClosureEnv1 = ClosureEnv1{}
    var t10 func(int) int = make(5)
    var closure_call__11 int = __closure_apply7(apply__10, t10, 1)
    var t11 func(int) int = make(6)
    var composed__12 int = t11(2)
    var generator__13 func(int) int = make(7)
    var from_generator__14 int = generator__13(3)
    var printer__15 func(string) struct{} = string_println
    var t12 string = int_to_string(result_direct__5)
    printer__15(t12)
    var t13 string = int_to_string(result_from_var__7)
    printer__15(t13)
    var t14 string = int_to_string(closure_call__11)
    printer__15(t14)
    var t15 string = int_to_string(composed__12)
    printer__15(t15)
    var t16 string = int_to_string(from_generator__14)
    printer__15(t16)
    ret21 = struct{}{}
    return ret21
}

func __closure_apply7(env8 ClosureEnv1, f__8 func(int) int, value__9 int) int {
    var ret23 int
    ret23 = f__8(value__9)
    return ret23
}

func main() {
    main0()
}
