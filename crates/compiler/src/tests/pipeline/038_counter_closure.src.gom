package main

import (
    "fmt"
)

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

type ref_int_x struct {
    value int
}

func ref__Ref_int(value int) *ref_int_x {
    return &ref_int_x{
        value: value,
    }
}

func ref_get__Ref_int(reference *ref_int_x) int {
    return reference.value
}

func ref_set__Ref_int(reference *ref_int_x, value int) struct{} {
    reference.value = value
    return struct{}{}
}

type Tuple2_closure_env_next_0_closure_env_reset_1 struct {
    _0 closure_env_next_0
    _1 closure_env_reset_1
}

type closure_env_next_0 struct {
    cell_0 *ref_int_x
}

type closure_env_reset_1 struct {
    cell_0 *ref_int_x
}

func make_counter() Tuple2_closure_env_next_0_closure_env_reset_1 {
    var ret22 Tuple2_closure_env_next_0_closure_env_reset_1
    var cell__0 *ref_int_x = ref__Ref_int(0)
    var next__2 closure_env_next_0 = closure_env_next_0{
        cell_0: cell__0,
    }
    var reset__3 closure_env_reset_1 = closure_env_reset_1{
        cell_0: cell__0,
    }
    ret22 = Tuple2_closure_env_next_0_closure_env_reset_1{
        _0: next__2,
        _1: reset__3,
    }
    return ret22
}

func main0() struct{} {
    var ret23 struct{}
    var counter__4 Tuple2_closure_env_next_0_closure_env_reset_1 = make_counter()
    var mtmp2 Tuple2_closure_env_next_0_closure_env_reset_1 = counter__4
    var x3 closure_env_next_0 = mtmp2._0
    var x4 closure_env_reset_1 = mtmp2._1
    var reset__6 closure_env_reset_1 = x4
    var next__5 closure_env_next_0 = x3
    var first__7 int = __closure_apply13(next__5)
    var second__8 int = __closure_apply13(next__5)
    __closure_apply15(reset__6)
    var third__9 int = __closure_apply13(next__5)
    var new_counter__10 Tuple2_closure_env_next_0_closure_env_reset_1 = make_counter()
    var mtmp6 Tuple2_closure_env_next_0_closure_env_reset_1 = new_counter__10
    var x7 closure_env_next_0 = mtmp6._0
    var new_next__11 closure_env_next_0 = x7
    var fourth__12 int = __closure_apply13(new_next__11)
    var t17 string = int_to_string(first__7)
    string_println(t17)
    var t18 string = int_to_string(second__8)
    string_println(t18)
    var t19 string = int_to_string(third__9)
    string_println(t19)
    var t20 string = int_to_string(fourth__12)
    string_println(t20)
    ret23 = struct{}{}
    return ret23
}

func __closure_apply13(env14 closure_env_next_0) int {
    var ret24 int
    var cell__0 *ref_int_x = env14.cell_0
    var t21 int = ref_get__Ref_int(cell__0)
    var next__1 int = int_add(t21, 1)
    ref_set__Ref_int(cell__0, next__1)
    ret24 = next__1
    return ret24
}

func __closure_apply15(env16 closure_env_reset_1) struct{} {
    var ret25 struct{}
    var cell__0 *ref_int_x = env16.cell_0
    ref_set__Ref_int(cell__0, 0)
    ret25 = struct{}{}
    return ret25
}

func main() {
    main0()
}
