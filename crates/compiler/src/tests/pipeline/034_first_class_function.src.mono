fn double(x/0: int) -> int {
  int_mul(x/0, 2)
}

fn increment(x/1: int) -> int {
  int_add(x/1, 1)
}

fn apply_once(f/2: (int) -> int, value/3: int) -> int {
  f/2(value/3)
}

fn compose(f/4: (int) -> int, g/5: (int) -> int, value/6: int) -> int {
  f/4(g/5(value/6))
}

fn main() -> unit {
  let local/7 = double in
  let first/8 = apply_once(local/7, 4) in
  let composed/9 = compose(double, increment, first/8) in
  let printer/10 = string_println in
  let mtmp0 = printer/10(int_to_string(composed/9)) in
  ()
}