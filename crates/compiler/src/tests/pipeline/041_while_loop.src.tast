fn sum_to(limit/0: int) -> int {
  let acc/1: Ref[int] = (ref : (int) -> Ref[int])(0) in
  let i/2: Ref[int] = (ref : (int) -> Ref[int])(0) in
  let _ : (unit) = (while (int_less : (int, int) -> bool)((ref_get : (Ref[int]) -> int)((i/2 : Ref[int])), (limit/0 : int)) {
        let current/3: int = (ref_get : (Ref[int]) -> int)((i/2 : Ref[int])) in
        let _ : unit = (ref_set : (Ref[int], int) -> unit)((acc/1 : Ref[int]), (ref_get : (Ref[int]) -> int)((acc/1 : Ref[int])) + (current/3 : int)) in
        let _ : unit = (ref_set : (Ref[int], int) -> unit)((i/2 : Ref[int]), (current/3 : int) + 1) in
        ()
    }) in
  (ref_get : (Ref[int]) -> int)((acc/1 : Ref[int]))
}

fn sum_even(limit/4: int) -> int {
  let acc/5: Ref[int] = (ref : (int) -> Ref[int])(0) in
  let i/6: Ref[int] = (ref : (int) -> Ref[int])(0) in
  let is_even/7: Ref[bool] = (ref : (bool) -> Ref[bool])(true) in
  let _ : (unit) = (while (int_less : (int, int) -> bool)((ref_get : (Ref[int]) -> int)((i/6 : Ref[int])), (limit/4 : int)) {
        let current/8: int = (ref_get : (Ref[int]) -> int)((i/6 : Ref[int])) in
        let _ : unit = (ref_set : (Ref[int], int) -> unit)((i/6 : Ref[int]), (current/8 : int) + 1) in
        let add_now/9: bool = (ref_get : (Ref[bool]) -> bool)((is_even/7 : Ref[bool])) in
        let _ : unit = (ref_set : (Ref[bool], bool) -> unit)((is_even/7 : Ref[bool]), !(add_now/9 : bool)) in
        if (add_now/9 : bool) {
            (ref_set : (Ref[int], int) -> unit)((acc/5 : Ref[int]), (ref_get : (Ref[int]) -> int)((acc/5 : Ref[int])) + (current/8 : int))
        } else {
            ()
        }
    }) in
  (ref_get : (Ref[int]) -> int)((acc/5 : Ref[int]))
}

fn main() -> unit {
  let first/10: int = (sum_to : (int) -> int)(5) in
  let evens/11: int = (sum_even : (int) -> int)(6) in
  let _ : unit = (string_println : (string) -> unit)((string_add : (string, string) -> string)("sum_to(5)=", (int_to_string : (int) -> string)((first/10 : int)))) in
  let _ : unit = (string_println : (string) -> unit)((string_add : (string, string) -> string)("sum_even(6)=", (int_to_string : (int) -> string)((evens/11 : int)))) in
  ()
}