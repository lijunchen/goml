fn test_nested_match(x/0: (bool, bool), y/1: (bool, bool)) -> unit {
  let x0 = x/0.0 in
  let x1 = x/0.1 in
  match x1 {
    true => {
      let x2 = y/1.0 in
      let x3 = y/1.1 in
      match x3 {
        true => {
          match x2 {
            true => {
              string_println("case4")
            },
            false => {
              string_println("case3")
            },
          }
        },
        false => {
          string_println("case4")
        },
      }
    },
    false => {
      match x0 {
        true => {
          let x4 = y/1.0 in
          let x5 = y/1.1 in
          match x5 {
            true => {
              match x4 {
                true => {
                  string_println("case2")
                },
                false => {
                  string_println("case1")
                },
              }
            },
            false => {
              string_println("case2")
            },
          }
        },
        false => {
          let x6 = y/1.0 in
          let x7 = y/1.1 in
          match x7 {
            true => {
              match x6 {
                true => {
                  string_println("case4")
                },
                false => {
                  string_println("case3")
                },
              }
            },
            false => {
              string_println("case4")
            },
          }
        },
      }
    },
  }
}

fn main() -> unit {
  let t12 = (true, false) in
  let t13 = (false, true) in
  let mtmp8 = test_nested_match(t12, t13) in
  let t14 = (true, false) in
  let t15 = (true, false) in
  let mtmp9 = test_nested_match(t14, t15) in
  let t16 = (false, true) in
  let t17 = (false, true) in
  let mtmp10 = test_nested_match(t16, t17) in
  let t18 = (false, true) in
  let t19 = (true, false) in
  let mtmp11 = test_nested_match(t18, t19) in
  ()
}