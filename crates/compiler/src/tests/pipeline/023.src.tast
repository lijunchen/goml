fn match_mixed_pair(pair/0: (int, string)) -> int {
  match (pair/0 : (int, string)) {
      (0, "zero") => 1,
      (0, _ : string) => 2,
      (1, "one") => 3,
      (_ : int, "zero") => 4,
      _ : (int, string) => 5,
  }
}

fn match_mixed_enum(value/1: Mixed) -> int {
  match (value/1 : Mixed) {
      Mixed::OnlyInt(0) => 6,
      Mixed::OnlyInt(_ : int) => 7,
      Mixed::OnlyStr("zero") => 8,
      Mixed::OnlyStr(_ : string) => 9,
      Mixed::Both(0, "zero") => 10,
      Mixed::Both(0, _ : string) => 11,
      Mixed::Both(_ : int, "zero") => 12,
      Mixed::Both(_ : int, _ : string) => 13,
  }
}

fn main() -> unit {
  let _ : unit = string_println(int_to_string(match_mixed_pair((0, "zero")))) in
  let _ : unit = string_println(int_to_string(match_mixed_pair((0, "other")))) in
  let _ : unit = string_println(int_to_string(match_mixed_pair((1, "one")))) in
  let _ : unit = string_println(int_to_string(match_mixed_pair((2, "zero")))) in
  let _ : unit = string_println(int_to_string(match_mixed_pair((2, "two")))) in
  let _ : unit = string_println(int_to_string(match_mixed_enum(Mixed::OnlyInt(0)))) in
  let _ : unit = string_println(int_to_string(match_mixed_enum(Mixed::OnlyInt(5)))) in
  let _ : unit = string_println(int_to_string(match_mixed_enum(Mixed::OnlyStr("zero")))) in
  let _ : unit = string_println(int_to_string(match_mixed_enum(Mixed::OnlyStr("hello")))) in
  let _ : unit = string_println(int_to_string(match_mixed_enum(Mixed::Both(0, "zero")))) in
  let _ : unit = string_println(int_to_string(match_mixed_enum(Mixed::Both(0, "hello")))) in
  let _ : unit = string_println(int_to_string(match_mixed_enum(Mixed::Both(2, "zero")))) in
  string_println(int_to_string(match_mixed_enum(Mixed::Both(3, "three"))))
}