fn bounce_int(shape/0: Shape[int]) -> Shape[int] {
  match (shape/0 : Shape[int]) {
      Shape::Dot(point/1: Point) => Shape::Dot((point/1 : Point)),
      Shape::Wrapped(inner/2: Wrapper[int]) => Shape::Wrapped((inner/2 : Wrapper[int])),
      Shape::Origin => Shape::Origin,
  }
}

fn wrap_unit(value/3: Wrapper[unit]) -> Shape[unit] {
  Shape::Wrapped((value/3 : Wrapper[unit]))
}

fn pick(flag/4: bool, point/5: Point, wrapper/6: Wrapper[int]) -> Shape[int] {
  match (flag/4 : bool) {
      true => Shape::Dot((point/5 : Point)),
      false => Shape::Wrapped((wrapper/6 : Wrapper[int])),
  }
}

fn describe(shape/7: Shape[T]) -> int {
  match (shape/7 : Shape[T]) {
      Shape::Dot(_ : Point) => 1,
      Shape::Wrapped(_ : Wrapper[T]) => 2,
      Shape::Origin => 0,
  }
}

fn point_to_string(point/8: Point) -> string {
  let Point { x: x/9: int, y: y/10: int } = (point/8 : Point) in
  let with_x/11: string = (string_add : (string, string) -> string)("Point { x: ", (int_to_string : (int) -> string)((x/9 : int))) in
  let with_y_label/12: string = (string_add : (string, string) -> string)((with_x/11 : string), ", y: ") in
  let with_y/13: string = (string_add : (string, string) -> string)((with_y_label/12 : string), (int_to_string : (int) -> string)((y/10 : int))) in
  (string_add : (string, string) -> string)((with_y/13 : string), " }")
}

fn wrapper_int_to_string(wrapper/14: Wrapper[int]) -> string {
  let Wrapper { value: value/15: int } = (wrapper/14 : Wrapper[int]) in
  let prefix/16: string = (string_add : (string, string) -> string)("Wrapper[int] { value: ", (int_to_string : (int) -> string)((value/15 : int))) in
  (string_add : (string, string) -> string)((prefix/16 : string), " }")
}

fn wrapper_unit_to_string(wrapper/17: Wrapper[unit]) -> string {
  let Wrapper { value: value/18: unit } = (wrapper/17 : Wrapper[unit]) in
  let prefix/19: string = (string_add : (string, string) -> string)("Wrapper[unit] { value: ", (unit_to_string : (unit) -> string)((value/18 : unit))) in
  (string_add : (string, string) -> string)((prefix/19 : string), " }")
}

fn shape_int_to_string(shape/20: Shape[int]) -> string {
  match (shape/20 : Shape[int]) {
      Shape::Dot(point/21: Point) => let prefix/22: string = (string_add : (string, string) -> string)("Shape::Dot(", (point_to_string : (Point) -> string)((point/21 : Point))) in
        (string_add : (string, string) -> string)((prefix/22 : string), ")"),
      Shape::Wrapped(wrapper/23: Wrapper[int]) => let prefix/24: string = (string_add : (string, string) -> string)("Shape::Wrapped(", (wrapper_int_to_string : (Wrapper[int]) -> string)((wrapper/23 : Wrapper[int]))) in
        (string_add : (string, string) -> string)((prefix/24 : string), ")"),
      Shape::Origin => "Shape::Origin",
  }
}

fn shape_unit_to_string(shape/25: Shape[unit]) -> string {
  match (shape/25 : Shape[unit]) {
      Shape::Dot(point/26: Point) => let prefix/27: string = (string_add : (string, string) -> string)("Shape::Dot(", (point_to_string : (Point) -> string)((point/26 : Point))) in
        (string_add : (string, string) -> string)((prefix/27 : string), ")"),
      Shape::Wrapped(wrapper/28: Wrapper[unit]) => let prefix/29: string = (string_add : (string, string) -> string)("Shape::Wrapped(", (wrapper_unit_to_string : (Wrapper[unit]) -> string)((wrapper/28 : Wrapper[unit]))) in
        (string_add : (string, string) -> string)((prefix/29 : string), ")"),
      Shape::Origin => "Shape::Origin",
  }
}

fn main() -> unit {
  let _ : unit = (string_println : (string) -> unit)((point_to_string : (Point) -> string)(Point { x: 3, y: 4 })) in
  let _ : unit = (string_println : (string) -> unit)((wrapper_int_to_string : (Wrapper[int]) -> string)(Wrapper { value: 7 })) in
  let _ : unit = (string_println : (string) -> unit)((wrapper_unit_to_string : (Wrapper[unit]) -> string)(Wrapper { value: () })) in
  let bounced_origin/30: Shape[int] = (bounce_int : (Shape[int]) -> Shape[int])(Shape::Origin) in
  let _ : unit = (string_println : (string) -> unit)((shape_int_to_string : (Shape[int]) -> string)(Shape::Dot(Point { x: 3, y: 4 }))) in
  let _ : unit = (string_println : (string) -> unit)((shape_int_to_string : (Shape[int]) -> string)(Shape::Wrapped(Wrapper { value: 7 }))) in
  let _ : unit = (string_println : (string) -> unit)((shape_int_to_string : (Shape[int]) -> string)((bounced_origin/30 : Shape[int]))) in
  let _ : unit = (string_println : (string) -> unit)((shape_unit_to_string : (Shape[unit]) -> string)(Shape::Dot(Point { x: 3, y: 4 }))) in
  let _ : unit = (string_println : (string) -> unit)((shape_unit_to_string : (Shape[unit]) -> string)(Shape::Wrapped(Wrapper { value: () }))) in
  let _ : unit = (string_println : (string) -> unit)((shape_unit_to_string : (Shape[unit]) -> string)(Shape::Origin)) in
  let _ : int = (describe : (Shape[int]) -> int)((bounce_int : (Shape[int]) -> Shape[int])(Shape::Origin)) in
  (string_println : (string) -> unit)("struct enums!")
}