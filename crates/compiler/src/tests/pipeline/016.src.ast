enum List[T] {
    Nil,
    Cons(T, List[T])
}

fn list_length(xs: List[T]) -> int {
    match xs {
        Nil => 0,
        Cons(_, tail) => 1 + list_length(tail),
    }
}

fn int_list_length(xs: List[int]) -> int {
    match xs {
        Nil => 0,
        Cons(_, tail) => 1 + int_list_length(tail),
    }
}

fn main() {
    let x = Cons(1, Nil) in
    let length = list_length(x) in
    let _ = string_println(int_to_string(length)) in
    let x = Cons(1, Cons(2, Nil)) in
    let length = list_length(x) in
    let _ = string_println(int_to_string(length)) in
    let x = Cons(0, Cons(1, Cons(2, Nil))) in
    let length = int_list_length(x) in
    let _ = string_println(int_to_string(length)) in
    let x = Cons((), Nil) in
    let length = list_length(x) in
    let _ = string_println(int_to_string(length)) in
    let x = Cons((), Cons((), Nil)) in
    let length = list_length(x) in
    let _ = string_println(int_to_string(length)) in
    let x = Cons(true, Cons(false, Nil)) in
    let length = list_length(x) in
    let _ = string_println(int_to_string(length)) in
    ()
}

