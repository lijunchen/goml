package main

import (
    "fmt"
)

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func int_add(x int, y int) int {
    return x + y
}

func int_mul(x int, y int) int {
    return x * y
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

type ClosureEnv0 struct {}

type ClosureEnv1 struct {}

type ClosureEnv2 struct {}

func double(x__0 int) int {
    var ret15 int
    ret15 = int_mul(x__0, 2)
    return ret15
}

func increment(x__1 int) int {
    var ret16 int
    ret16 = int_add(x__1, 1)
    return ret16
}

func apply_once(f__2 func(int) int, value__3 int) int {
    var ret17 int
    ret17 = f__2(value__3)
    return ret17
}

func compose(f__4 func(int) int, g__5 func(int) int, value__6 int) int {
    var ret18 int
    var t10 int = g__5(value__6)
    ret18 = f__4(t10)
    return ret18
}

func main0() struct{} {
    var ret19 struct{}
    var local__7 func(int) int = double
    var first__8 int = apply_once(local__7, 4)
    var composed__9 int = compose(double, increment, first__8)
    var closure_apply__11 ClosureEnv0 = ClosureEnv0{}
    var closure_result__12 int = __closure_apply4(closure_apply__11, composed__9)
    var global_invoker__15 ClosureEnv1 = ClosureEnv1{}
    var invoked_with_global__16 int = __closure_apply6(global_invoker__15, double, 3)
    var composer_closure__18 ClosureEnv2 = ClosureEnv2{}
    var composed_by_closure__19 int = __closure_apply8(composer_closure__18, 5)
    var printer__20 func(string) struct{} = string_println
    var t11 string = int_to_string(composed__9)
    printer__20(t11)
    var t12 string = int_to_string(closure_result__12)
    printer__20(t12)
    var t13 string = int_to_string(invoked_with_global__16)
    printer__20(t13)
    var t14 string = int_to_string(composed_by_closure__19)
    printer__20(t14)
    ret19 = struct{}{}
    return ret19
}

func __closure_apply4(env5 ClosureEnv0, value__10 int) int {
    var ret20 int
    ret20 = apply_once(increment, value__10)
    return ret20
}

func __closure_apply6(env7 ClosureEnv1, func_to_call__13 func(int) int, value__14 int) int {
    var ret21 int
    ret21 = apply_once(func_to_call__13, value__14)
    return ret21
}

func __closure_apply8(env9 ClosureEnv2, value__17 int) int {
    var ret22 int
    ret22 = compose(double, increment, value__17)
    return ret22
}

func main() {
    main0()
}
