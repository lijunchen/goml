struct Point { x: int, y: int }

enum Option[T] {
    Some(T),
    None,
}

trait Display {
    fn show(Self) -> string;
}

impl Display for Point {
    fn show(self: Point) -> string { "Point" }
}

impl Display for Option[int] {
    fn show(self: Option[int]) -> string {
        match self {
            Some(value) => string_add("Some(", string_add(int_to_string(value), ")")),
            None => "None",
        }
    }
}

fn make_optional(flag: bool) -> Option[int] {
    if flag { Some(42) } else { None }
}

fn main() {
    let point = Point { x: 1, y: 2 } in
    let some_number = make_optional(true) in
    let none_number = make_optional(false) in
    let _ = string_println(show(point)) in
    let _ = string_println(show(some_number)) in
    let _ = string_println(show(none_number)) in
    ()
}
