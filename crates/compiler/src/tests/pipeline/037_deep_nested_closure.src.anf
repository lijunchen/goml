fn main() -> unit {
  let a/0 = 10 in
  let f1/11 = closure_env_f1_3 { a_0: a/0 } in
  let result/12 = __closure_apply6(f1/11, 1) in
  let t8 = int_to_string(result/12) in
  string_println(t8)
}

fn __closure_apply0(env1: closure_env_f4_0, w/7: int) -> int {
  let a/0 = closure_env_f4_0.a_0(env1) in
  let b/2 = closure_env_f4_0.b_1(env1) in
  let c/4 = closure_env_f4_0.c_2(env1) in
  let d/6 = closure_env_f4_0.d_3(env1) in
  let x/1 = closure_env_f4_0.x_4(env1) in
  let y/3 = closure_env_f4_0.y_5(env1) in
  let z/5 = closure_env_f4_0.z_6(env1) in
  let t14 = int_add(a/0, b/2) in
  let t13 = int_add(t14, c/4) in
  let t12 = int_add(t13, d/6) in
  let t11 = int_add(t12, x/1) in
  let t10 = int_add(t11, y/3) in
  let t9 = int_add(t10, z/5) in
  int_add(t9, w/7)
}

fn __closure_apply2(env3: closure_env_f3_1, z/5: int) -> int {
  let a/0 = closure_env_f3_1.a_0(env3) in
  let b/2 = closure_env_f3_1.b_1(env3) in
  let c/4 = closure_env_f3_1.c_2(env3) in
  let x/1 = closure_env_f3_1.x_3(env3) in
  let y/3 = closure_env_f3_1.y_4(env3) in
  let d/6 = 40 in
  let f4/8 = closure_env_f4_0 { a_0: a/0, b_1: b/2, c_2: c/4, d_3: d/6, x_4: x/1, y_5: y/3, z_6: z/5 } in
  __closure_apply0(f4/8, 4)
}

fn __closure_apply4(env5: closure_env_f2_2, y/3: int) -> int {
  let a/0 = closure_env_f2_2.a_0(env5) in
  let b/2 = closure_env_f2_2.b_1(env5) in
  let x/1 = closure_env_f2_2.x_2(env5) in
  let c/4 = 30 in
  let f3/9 = closure_env_f3_1 { a_0: a/0, b_1: b/2, c_2: c/4, x_3: x/1, y_4: y/3 } in
  __closure_apply2(f3/9, 3)
}

fn __closure_apply6(env7: closure_env_f1_3, x/1: int) -> int {
  let a/0 = closure_env_f1_3.a_0(env7) in
  let b/2 = 20 in
  let f2/10 = closure_env_f2_2 { a_0: a/0, b_1: b/2, x_2: x/1 } in
  __closure_apply4(f2/10, 2)
}