fn print_int_list(xs/0: IntList) -> unit {
  match (xs/0 : IntList) {
      IntList::Nil => (string_print : (string) -> unit)("Nil"),
      IntList::Cons(x/1: int, xs/2: IntList) => let _ : unit = (string_print : (string) -> unit)("Cons") in
        let _ : unit = (string_print : (string) -> unit)("(") in
        let _ : unit = (string_print : (string) -> unit)((int_to_string : (int) -> string)((x/1 : int))) in
        let _ : unit = (string_print : (string) -> unit)(", ") in
        let _ : unit = (print_int_list : (IntList) -> unit)((xs/2 : IntList)) in
        let _ : unit = (string_print : (string) -> unit)(")") in
        (),
  }
}

fn int_list_rev_aux(xs/3: IntList, acc/4: IntList) -> IntList {
  match (xs/3 : IntList) {
      IntList::Nil => (acc/4 : IntList),
      IntList::Cons(head/5: int, tail/6: IntList) => (int_list_rev_aux : (IntList, IntList) -> IntList)((tail/6 : IntList), IntList::Cons((head/5 : int), (acc/4 : IntList))),
  }
}

fn int_list_rev(xs/7: IntList) -> IntList {
  (int_list_rev_aux : (IntList, IntList) -> IntList)((xs/7 : IntList), IntList::Nil)
}

fn int_list_length(xs/8: IntList) -> int {
  match (xs/8 : IntList) {
      IntList::Nil => 0,
      IntList::Cons(_ : int, xs/9: IntList) => 1 + (int_list_length : (IntList) -> int)((xs/9 : IntList)),
  }
}

fn print_int_list_length(xs/10: IntList) -> unit {
  let _ : unit = (string_print : (string) -> unit)("Length: ") in
  let _ : unit = (string_println : (string) -> unit)((int_to_string : (int) -> string)((int_list_length : (IntList) -> int)((xs/10 : IntList)))) in
  ()
}

fn main() -> unit {
  let x/11: IntList = IntList::Nil in
  let _ : unit = (print_int_list : (IntList) -> unit)((x/11 : IntList)) in
  let _ : unit = (string_println : (string) -> unit)("") in
  let _ : unit = (print_int_list_length : (IntList) -> unit)((x/11 : IntList)) in
  let x/12: IntList = IntList::Cons(1, IntList::Nil) in
  let _ : unit = (print_int_list : (IntList) -> unit)((x/12 : IntList)) in
  let _ : unit = (string_println : (string) -> unit)("") in
  let _ : unit = (print_int_list_length : (IntList) -> unit)((x/12 : IntList)) in
  let x/13: IntList = IntList::Cons(1, IntList::Cons(2, IntList::Cons(3, IntList::Nil))) in
  let _ : unit = (print_int_list : (IntList) -> unit)((x/13 : IntList)) in
  let _ : unit = (string_println : (string) -> unit)("") in
  let _ : unit = (print_int_list_length : (IntList) -> unit)((x/13 : IntList)) in
  let y/14: IntList = (int_list_rev : (IntList) -> IntList)((x/13 : IntList)) in
  let _ : unit = (print_int_list : (IntList) -> unit)((y/14 : IntList)) in
  let _ : unit = (string_println : (string) -> unit)("") in
  ()
}