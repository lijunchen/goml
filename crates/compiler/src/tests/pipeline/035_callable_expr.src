fn double(x: int) -> int {
    x * 2
}

fn increment(x: int) -> int {
    x + 1
}

fn make(adder: int) -> (int) -> int {
    |value: int| value + adder
}

fn chooser(flag: bool) -> (int) -> int {
    if flag { double } else { increment }
}

fn main() {
    let result_direct = chooser(true)(3) in
    let chosen = chooser(false) in
    let result_from_var = chosen(4) in
    let apply = |f: (int) -> int, value: int| f(value) in
    let closure_call = apply(make(5), 1) in
    let composed = make(6)(2) in
    let generator = make(7) in
    let from_generator = generator(3) in
    let printer = string_println in
    let _ = printer(int_to_string(result_direct)) in
    let _ = printer(int_to_string(result_from_var)) in
    let _ = printer(int_to_string(closure_call)) in
    let _ = printer(int_to_string(composed)) in
    let _ = printer(int_to_string(from_generator)) in
    ()
}
