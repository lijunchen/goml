package main

import (
    "fmt"
)

func bool_to_string(x bool) string {
    if x {
        return "true"
    } else {
        return "false"
    }
}

func int_to_string(x int) string {
    return fmt.Sprintf("%d", x)
}

func bool_not(x bool) bool {
    return !x
}

func bool_and(x bool, y bool) bool {
    return x && y
}

func int_add(x int, y int) int {
    return x + y
}

func int_mul(x int, y int) int {
    return x * y
}

func int_less(x int, y int) bool {
    return x < y
}

func string_add(a string, b string) string {
    return a + b
}

func string_println(s string) struct{} {
    fmt.Println(s)
    return struct{}{}
}

func array_get__Array_2_Fn_int_to_int(arr [2]func(int) int, index int) func(int) int {
    return arr[index]
}

func array_get__Array_2_int(arr [2]int, index int) int {
    return arr[index]
}

func array_set__Array_2_int(arr [2]int, index int, value int) [2]int {
    arr[index] = value
    return arr
}

type ref_int_x struct {
    value int
}

func ref__Ref_int(value int) *ref_int_x {
    return &ref_int_x{
        value: value,
    }
}

func ref_get__Ref_int(reference *ref_int_x) int {
    return reference.value
}

func ref_set__Ref_int(reference *ref_int_x, value int) struct{} {
    reference.value = value
    return struct{}{}
}

type ref_bool_x struct {
    value bool
}

func ref__Ref_bool(value bool) *ref_bool_x {
    return &ref_bool_x{
        value: value,
    }
}

func ref_get__Ref_bool(reference *ref_bool_x) bool {
    return reference.value
}

func ref_set__Ref_bool(reference *ref_bool_x, value bool) struct{} {
    reference.value = value
    return struct{}{}
}

type Tuple2_string_string struct {
    _0 string
    _1 string
}

type Tuple4_Tracker_closure_env_snapshot_0_closure_env_bump_1_closure_env_flip_2 struct {
    _0 Tracker
    _1 closure_env_snapshot_0
    _2 closure_env_bump_1
    _3 closure_env_flip_2
}

type Tracker struct {
    label string
    count *ref_int_x
    toggled *ref_bool_x
}

type closure_env_snapshot_0 struct {
    count_0 *ref_int_x
}

type closure_env_bump_1 struct {
    count_0 *ref_int_x
}

type closure_env_flip_2 struct {
    toggled_0 *ref_bool_x
}

type Record__int interface {
    isRecord__int()
}

type Record__int_Value struct {
    _0 int
}

func (_ Record__int_Value) isRecord__int() {}

type Record__int_Pair struct {
    _0 int
    _1 int
}

func (_ Record__int_Pair) isRecord__int() {}

type Record__int_Empty struct {}

func (_ Record__int_Empty) isRecord__int() {}

type Record__string interface {
    isRecord__string()
}

type Record__string_Value struct {
    _0 string
}

func (_ Record__string_Value) isRecord__string() {}

type Record__string_Pair struct {
    _0 string
    _1 string
}

func (_ Record__string_Pair) isRecord__string() {}

type Record__string_Empty struct {}

func (_ Record__string_Empty) isRecord__string() {}

type Maybe__int interface {
    isMaybe__int()
}

type Maybe__int_Some struct {
    _0 int
}

func (_ Maybe__int_Some) isMaybe__int() {}

type Maybe__int_None struct {}

func (_ Maybe__int_None) isMaybe__int() {}

type Maybe__string interface {
    isMaybe__string()
}

type Maybe__string_Some struct {
    _0 string
}

func (_ Maybe__string_Some) isMaybe__string() {}

type Maybe__string_None struct {}

func (_ Maybe__string_None) isMaybe__string() {}

func impl_Describe_Tracker_describe(self__0 Tracker) string {
    var ret64 string
    var mtmp0 Tracker = self__0
    var x1 string = mtmp0.label
    var x2 *ref_int_x = mtmp0.count
    var x3 *ref_bool_x = mtmp0.toggled
    var toggled__3 *ref_bool_x = x3
    var count__2 *ref_int_x = x2
    var label__1 string = x1
    var current__4 int = ref_get__Ref_int(count__2)
    var flag__5 bool = ref_get__Ref_bool(toggled__3)
    var with_label__6 string = string_add("Tracker(", label__1)
    var with_count_label__7 string = string_add(with_label__6, ", count: ")
    var t38 string = int_to_string(current__4)
    var with_count__8 string = string_add(with_count_label__7, t38)
    var with_flag_label__9 string = string_add(with_count__8, ", toggled: ")
    var t40 string = bool_to_string(flag__5)
    var t39 string = string_add(t40, ")")
    ret64 = string_add(with_flag_label__9, t39)
    return ret64
}

func impl_Describe_Record_int_describe(self__10 Record__int) string {
    var ret65 string
    switch self__10 := self__10.(type) {
    case Record__int_Value:
        var x4 int = self__10._0
        var value__11 int = x4
        var t42 string = int_to_string(value__11)
        var t41 string = string_add(t42, ")")
        ret65 = string_add("Value(", t41)
    case Record__int_Pair:
        var x5 int = self__10._0
        var x6 int = self__10._1
        var after__13 int = x6
        var before__12 int = x5
        var t43 string = int_to_string(before__12)
        var prefix__14 string = string_add("Pair(", t43)
        var t46 string = int_to_string(after__13)
        var t45 string = string_add(t46, ")")
        var t44 string = string_add(", ", t45)
        ret65 = string_add(prefix__14, t44)
    case Record__int_Empty:
        ret65 = "Empty"
    }
    return ret65
}

func impl_Describe_Record_string_describe(self__15 Record__string) string {
    var ret66 string
    switch self__15 := self__15.(type) {
    case Record__string_Value:
        var x7 string = self__15._0
        var text__16 string = x7
        var t47 string = string_add(text__16, ")")
        ret66 = string_add("Value(", t47)
    case Record__string_Pair:
        var x8 string = self__15._0
        var x9 string = self__15._1
        var after__18 string = x9
        var before__17 string = x8
        var prefix__19 string = string_add("Pair(", before__17)
        var t49 string = string_add(after__18, ")")
        var t48 string = string_add(", ", t49)
        ret66 = string_add(prefix__19, t48)
    case Record__string_Empty:
        ret66 = "Empty"
    }
    return ret66
}

func format_total(total__26 int) string {
    var ret67 string
    var t50 string = int_to_string(total__26)
    ret67 = string_add("total: ", t50)
    return ret67
}

func increment(value__27 int) int {
    var ret68 int
    ret68 = int_add(value__27, 1)
    return ret68
}

func triple(value__28 int) int {
    var ret69 int
    ret69 = int_mul(value__28, 3)
    return ret69
}

func pair_join(parts__29 Tuple2_string_string) string {
    var ret70 string
    var mtmp11 Tuple2_string_string = parts__29
    var x12 string = mtmp11._0
    var x13 string = mtmp11._1
    var right__31 string = x13
    var left__30 string = x12
    var t51 string = string_add(" -> ", right__31)
    ret70 = string_add(left__30, t51)
    return ret70
}

func run_transforms(value__32 int, transforms__33 [2]func(int) int) [2]int {
    var ret71 [2]int
    var first__34 func(int) int = array_get__Array_2_Fn_int_to_int(transforms__33, 0)
    var second__35 func(int) int = array_get__Array_2_Fn_int_to_int(transforms__33, 1)
    var first_result__36 int = first__34(value__32)
    var second_result__37 int = second__35(first_result__36)
    var t52 [2]int = [2]int{first_result__36, value__32}
    ret71 = array_set__Array_2_int(t52, 1, second_result__37)
    return ret71
}

func gather(record__38 Record__int) Maybe__int {
    var ret72 Maybe__int
    switch record__38 := record__38.(type) {
    case Record__int_Value:
        var x14 int = record__38._0
        var value__39 int = x14
        ret72 = Maybe__int_Some{
            _0: value__39,
        }
    case Record__int_Pair:
        var x16 int = record__38._1
        var after__40 int = x16
        ret72 = Maybe__int_Some{
            _0: after__40,
        }
    case Record__int_Empty:
        ret72 = Maybe__int_None{}
    }
    return ret72
}

func build_counter(label__41 string, start__42 int) Tuple4_Tracker_closure_env_snapshot_0_closure_env_bump_1_closure_env_flip_2 {
    var ret73 Tuple4_Tracker_closure_env_snapshot_0_closure_env_bump_1_closure_env_flip_2
    var count__43 *ref_int_x = ref__Ref_int(start__42)
    var toggled__44 *ref_bool_x = ref__Ref_bool(false)
    var tracker__45 Tracker = Tracker{
        label: label__41,
        count: count__43,
        toggled: toggled__44,
    }
    var snapshot__46 closure_env_snapshot_0 = closure_env_snapshot_0{
        count_0: count__43,
    }
    var bump__49 closure_env_bump_1 = closure_env_bump_1{
        count_0: count__43,
    }
    var flip__52 closure_env_flip_2 = closure_env_flip_2{
        toggled_0: toggled__44,
    }
    ret73 = Tuple4_Tracker_closure_env_snapshot_0_closure_env_bump_1_closure_env_flip_2{
        _0: tracker__45,
        _1: snapshot__46,
        _2: bump__49,
        _3: flip__52,
    }
    return ret73
}

func main0() struct{} {
    var ret74 struct{}
    var mtmp19 Tuple4_Tracker_closure_env_snapshot_0_closure_env_bump_1_closure_env_flip_2 = build_counter("goml", 2)
    var x20 Tracker = mtmp19._0
    var x21 closure_env_snapshot_0 = mtmp19._1
    var x22 closure_env_bump_1 = mtmp19._2
    var x23 closure_env_flip_2 = mtmp19._3
    var flip__56 closure_env_flip_2 = x23
    var bump__55 closure_env_bump_1 = x22
    var snapshot__54 closure_env_snapshot_0 = x21
    var tracker__53 Tracker = x20
    var tracker_info__57 string = impl_Describe_Tracker_describe(tracker__53)
    var first_record__58 Record__int = __closure_apply32(snapshot__54)
    var bumped_record__59 Record__int = __closure_apply34(bump__55, 5)
    var flipped_record__60 Record__string = __closure_apply36(flip__56)
    var maybe_first__61 Maybe__int = gather(first_record__58)
    var maybe_second__62 Maybe__int = gather(bumped_record__59)
    var chosen__63 Maybe__int = choose__T_Maybe_int(true, maybe_second__62, maybe_first__61)
    var stringified__64 Maybe__string = map_maybe__T_int__U_string(chosen__63, format_total)
    var transforms__65 [2]func(int) int = [2]func(int) int{increment, triple}
    var results__66 [2]int = run_transforms(4, transforms__65)
    var first_result__67 int = array_get__Array_2_int(results__66, 0)
    var second_result__68 int = array_get__Array_2_int(results__66, 1)
    var t53 bool = int_less(first_result__67, second_result__68)
    var order_check__69 bool = bool_and(t53, true)
    var first_text__70 string = impl_Describe_Record_int_describe(first_record__58)
    var bumped_text__71 string = impl_Describe_Record_int_describe(bumped_record__59)
    var flipped_text__72 string = impl_Describe_Record_string_describe(flipped_record__60)
    var summary__74 string
    switch stringified__64 := stringified__64.(type) {
    case Maybe__string_Some:
        var x24 string = stringified__64._0
        var text__73 string = x24
        summary__74 = string_add("Snapshot: ", text__73)
    case Maybe__string_None:
        summary__74 = "Snapshot: none"
    }
    var t55 string = int_to_string(first_result__67)
    var t56 string = int_to_string(second_result__68)
    var t54 Tuple2_string_string = Tuple2_string_string{
        _0: t55,
        _1: t56,
    }
    var pair_text__75 string = pair_join(t54)
    var bool_text__76 string = bool_to_string(order_check__69)
    string_println(tracker_info__57)
    string_println(first_text__70)
    string_println(bumped_text__71)
    string_println(flipped_text__72)
    string_println(summary__74)
    string_println(pair_text__75)
    string_println(bool_text__76)
    ret74 = struct{}{}
    return ret74
}

func __closure_apply32(env33 closure_env_snapshot_0) Record__int {
    var ret75 Record__int
    var count__43 *ref_int_x = env33.count_0
    var t57 int = ref_get__Ref_int(count__43)
    ret75 = Record__int_Value{
        _0: t57,
    }
    return ret75
}

func __closure_apply34(env35 closure_env_bump_1, delta__47 int) Record__int {
    var ret76 Record__int
    var count__43 *ref_int_x = env35.count_0
    var before__48 int = ref_get__Ref_int(count__43)
    var t58 int = int_add(before__48, delta__47)
    ref_set__Ref_int(count__43, t58)
    var t59 int = ref_get__Ref_int(count__43)
    ret76 = Record__int_Pair{
        _0: before__48,
        _1: t59,
    }
    return ret76
}

func __closure_apply36(env37 closure_env_flip_2) Record__string {
    var ret77 Record__string
    var toggled__44 *ref_bool_x = env37.toggled_0
    var before__50 bool = ref_get__Ref_bool(toggled__44)
    var t60 bool = bool_not(before__50)
    ref_set__Ref_bool(toggled__44, t60)
    var after__51 bool = ref_get__Ref_bool(toggled__44)
    var t61 string = bool_to_string(before__50)
    var t62 string = bool_to_string(after__51)
    ret77 = Record__string_Pair{
        _0: t61,
        _1: t62,
    }
    return ret77
}

func choose__T_Maybe_int(flag__20 bool, when_true__21 Maybe__int, when_false__22 Maybe__int) Maybe__int {
    var ret78 Maybe__int
    if flag__20 {
        ret78 = when_true__21
    } else {
        ret78 = when_false__22
    }
    return ret78
}

func map_maybe__T_int__U_string(value__23 Maybe__int, f__24 func(int) string) Maybe__string {
    var ret79 Maybe__string
    switch value__23 := value__23.(type) {
    case Maybe__int_Some:
        var x10 int = value__23._0
        var inner__25 int = x10
        var t63 string = f__24(inner__25)
        ret79 = Maybe__string_Some{
            _0: t63,
        }
    case Maybe__int_None:
        ret79 = Maybe__string_None{}
    }
    return ret79
}

func main() {
    main0()
}
