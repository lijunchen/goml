fn bump(cell/0: ref int) -> int {
  let mtmp0 = ref_set(cell/0, int_add(ref_get(cell/0), 1)) in
  ref_get(cell/0)
}

fn flip(flag/1: ref bool) -> bool {
  let current/2 = ref_get(flag/1) in
  let mtmp1 = ref_set(flag/1, bool_not(current/2)) in
  ref_get(flag/1)
}

fn nested_total(cell/3: ref ref int) -> int {
  let inner/4 = ref_get(cell/3) in
  let before/5 = ref_get(inner/4) in
  let mtmp2 = ref_set(inner/4, int_add(before/5, 2)) in
  int_add(before/5, ref_get(inner/4))
}

fn alias_bump(cell/6: ref int) -> int {
  let alias/7 = cell/6 in
  let mtmp3 = ref_set(alias/7, int_add(ref_get(alias/7), 5)) in
  ref_get(alias/7)
}

fn pair_sum() -> int {
  let first/8 = ref(4) in
  let second/9 = ref(6) in
  let mtmp4 = ref_set(first/8, int_add(ref_get(first/8), ref_get(second/9))) in
  int_add(ref_get(first/8), ref_get(second/9))
}

fn reassign_nested(nested/10: ref ref int) -> int {
  let inner/11 = ref_get(nested/10) in
  let mtmp5 = ref_set(inner/11, int_add(ref_get(inner/11), 7)) in
  ref_get(inner/11)
}

fn main() -> unit {
  let counter/12 = ref(39) in
  let toggler/13 = ref(false) in
  let nested/14 = ref(ref(3)) in
  let bumped/15 = bump(counter/12) in
  let flipped/16 = flip(toggler/13) in
  let flipped_again/17 = flip(toggler/13) in
  let inner/18 = ref_get(nested/14) in
  let mtmp6 = ref_set(inner/18, int_add(ref_get(inner/18), bumped/15)) in
  let nested_total_val/19 = nested_total(nested/14) in
  let alias_total/20 = alias_bump(counter/12) in
  let pair_total/21 = pair_sum() in
  let reassigned/22 = reassign_nested(nested/14) in
  let bool_check/23 = bool_not(false) in
  let mtmp7 = string_println(int_to_string(int_add(bumped/15, ref_get(counter/12)))) in
  let mtmp8 = string_println(int_to_string(int_add(int_add(nested_total_val/19, alias_total/20), reassigned/22))) in
  let mtmp9 = string_println(int_to_string(pair_total/21)) in
  let mtmp10 = string_println(bool_to_string(bool_and(bool_and(flipped/16, flipped_again/17), bool_check/23))) in
  ()
}