fn make_counter() -> (() -> int, () -> unit) {
  let cell/0 = ref(0) in
  let next/2 = || => let next/1 = int_add(ref_get(cell/0), 1) in
  let mtmp0 = ref_set(cell/0, next/1) in
  next/1 in
  let reset/3 = || => let mtmp1 = ref_set(cell/0, 0) in
  () in
  (next/2, reset/3)
}

fn main() -> unit {
  let counter/4 = make_counter() in
  let mtmp2 = counter/4 in
  let x3 = mtmp2.0 in
  let x4 = mtmp2.1 in
  let reset/6 = x4 in
  let next/5 = x3 in
  let first/7 = next/5() in
  let second/8 = next/5() in
  let mtmp5 = reset/6() in
  let third/9 = next/5() in
  let new_counter/10 = make_counter() in
  let mtmp6 = new_counter/10 in
  let x7 = mtmp6.0 in
  let x8 = mtmp6.1 in
  let new_next/11 = x7 in
  let fourth/12 = new_next/11() in
  let mtmp9 = string_println(int_to_string(first/7)) in
  let mtmp10 = string_println(int_to_string(second/8)) in
  let mtmp11 = string_println(int_to_string(third/9)) in
  let mtmp12 = string_println(int_to_string(fourth/12)) in
  ()
}