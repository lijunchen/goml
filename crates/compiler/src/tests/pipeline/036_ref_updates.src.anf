fn bump(cell/0: ref int) -> int {
  let t8 = ref_get(cell/0) in
  let t7 = int_add(t8, 1) in
  let mtmp0 = ref_set(cell/0, t7) in
  ref_get(cell/0)
}

fn flip(flag/1: ref bool) -> bool {
  let current/2 = ref_get(flag/1) in
  let t9 = bool_not(current/2) in
  let mtmp1 = ref_set(flag/1, t9) in
  ref_get(flag/1)
}

fn nested_total(cell/3: ref ref int) -> int {
  let inner/4 = ref_get(cell/3) in
  let before/5 = ref_get(inner/4) in
  let t10 = int_add(before/5, 2) in
  let mtmp2 = ref_set(inner/4, t10) in
  let t11 = ref_get(inner/4) in
  int_add(before/5, t11)
}

fn main() -> unit {
  let counter/6 = ref_new(39) in
  let toggler/7 = ref_new(false) in
  let t12 = ref_new(3) in
  let nested/8 = ref_new(t12) in
  let bumped/9 = bump(counter/6) in
  let flipped/10 = flip(toggler/7) in
  let inner/11 = ref_get(nested/8) in
  let t14 = ref_get(inner/11) in
  let t13 = int_add(t14, bumped/9) in
  let mtmp3 = ref_set(inner/11, t13) in
  let nested_total_val/12 = nested_total(nested/8) in
  let bool_check/13 = bool_not(false) in
  let t17 = ref_get(counter/6) in
  let t16 = int_add(bumped/9, t17) in
  let t15 = int_to_string(t16) in
  let mtmp4 = string_println(t15) in
  let t18 = int_to_string(nested_total_val/12) in
  let mtmp5 = string_println(t18) in
  let t20 = bool_and(flipped/10, bool_check/13) in
  let t19 = bool_to_string(t20) in
  let mtmp6 = string_println(t19) in
  ()
}